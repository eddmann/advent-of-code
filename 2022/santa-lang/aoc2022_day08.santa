input: read("aoc://2022/8")

let parse_grid = |input| {
  zip(0.., lines(input))
    |> flat_map(|[y, row]| {
      zip(0.., row) |> map(|[x, tree_height]| {
        [[y, x], int(tree_height)]
      });
    })
    |> hash;
}

let grid_directions = |grid| {
  let [ys, xs] = zip(..keys(grid));
  let [ly, hy] = [min(ys), max(ys)];
  let [lx, hx] = [min(xs), max(xs)];

  |[y, x]| {
    let not_self = _ != [y, x];

    // up, down, left, right
    [
      max(y-1, ly)..lx |> map(|dy| [dy, x]) |> filter(not_self),
      min(y+1, hy)..hy |> map(|dy| [dy, x]) |> filter(not_self),
      max(x-1, lx)..lx |> map(|dx| [y, dx]) |> filter(not_self),
      min(x+1, hx)..hx |> map(|dx| [y, dx]) |> filter(not_self)
    ];
  };
}

part_one: {
  let grid = parse_grid(input);
  let directions = grid_directions(grid);

  grid
    |> filter(|tree_height, position| {
      directions(position)
        |> any(all(|viewpoint| grid[viewpoint] < tree_height))
    })
    |> size;
}

part_two: {
  let grid = parse_grid(input);
  let directions = grid_directions(grid);

  let scenic_score = |tree_height, direction| {
    direction |> reduce(
      |score, viewpoint| if grid[viewpoint] < tree_height { score + 1 } else { break(score + 1) },
      0
    );
  };

  grid
    |> map(|tree_height, position| {
      directions(position)
        |> reduce(
          |score, direction| score * scenic_score(tree_height, direction),
          1
        );
    })
    |> max;
}

test: {
  input: "30373
25512
65332
33549
35390"
  part_one: 21
  part_two: 8
}
