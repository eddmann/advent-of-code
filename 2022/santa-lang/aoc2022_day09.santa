input: read("aoc://2022/9")

let parse_motions = lines >> flat_map |motion| {
  let [direction, step] = split(" ", motion);
  repeat(direction) |> take(step);
};

let directions = #{"U": [-1, 0], "D": [1, 0], "L": [0, -1], "R": [0, 1]};

let is_adjacent = |[hy, hx], [ty, tx]| {
  abs(hy - ty) < 2 && abs(hx - tx) < 2;
}

let next_tail_point = |head, tail| {
  if is_adjacent(head, tail) {
    return tail;
  }

  let [hy, hx] = head;
  let [ty, tx] = tail;

  if hy == ty { // horizontal
    return [ty, if hx > tx { tx + 1 } else { tx - 1 }];
  }

  if hx == tx { // vertical
    return [if hy > ty { ty + 1 } else { ty - 1 }, tx];
  }

  if hy < ty && hx > tx { // down-right
    return [ty - 1, tx + 1];
  }

  if hy < ty && hx < tx { // down-left
    return [ty - 1, tx - 1];
  }

  if hy > ty && hx > tx { // top-right
    return [ty + 1, tx + 1];
  }

  return [ty + 1, tx - 1]; // top-left
}

let take_step = |knots, direction| {
  knots[1..] |> fold([knots[0] `vec_add` direction]) |knots, knot| {
    knots + [next_tail_point(knots[-1], knot)];
  };
}

let tail_visits = |total_knots| {
  fold_s(
    [{}, [[0, 0]] * total_knots],
    |[visits, knots], [direction, step]| {
      let next_knots = knots `take_step` directions[direction];
      [visits + {next_knots[-1]}, next_knots];
    }
  );
}

part_one: {
  parse_motions(input)
    |> tail_visits(2)
    |> size;
}

part_two: {
  parse_motions(input)
    |> tail_visits(10)
    |> size;
}

test: {
  input: "R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2"
  part_one: 13
  part_two: 1
}

test: {
  input: "R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20"
  part_two: 36
}

test: {
  input: read("aoc://2022/9")
  part_one: 5907
  part_two: 2303
}
