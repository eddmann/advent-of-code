input: read("aoc://2018/7")

let loop = |fn| each(fn, 0..);

let parse_instructions = lines >> map(|line| [line[5], line[-12]]);

let sort_steps = flat_map(|a| a) >> set >> list >> sort(>);

part_one: {
  let mut dependencies = parse_instructions(input);
  let mut remaining_steps = sort_steps(dependencies);
  let mut step_order = "";

  loop(|| {
    if size(remaining_steps) == 0 {
      break;
    }

    let next_step = remaining_steps
      |> filter(|step| all(|[_, dependent]| step != dependent, dependencies))
      |> first;

    dependencies = dependencies |> filter(|[step]| step != next_step);
    remaining_steps = remove_value(next_step, remaining_steps);
    step_order = step_order + next_step;
  });

  step_order;
}

let step_duration = #{
  "A": 0,  "B": 1,  "C": 2,  "D": 3,  "E": 4,
  "F": 5,  "G": 6,  "H": 7,  "I": 8,  "J": 9,
  "K": 10, "L": 11, "M": 12, "N": 13, "O": 14,
  "P": 15, "Q": 16, "R": 17, "S": 18, "T": 19,
  "U": 20, "V": 21, "W": 22, "X": 23, "Y": 24,
  "Z": 25
};

let time = |step| 60 + step_duration[step];

part_two: {
  let mut dependencies = parse_instructions(input);
  let mut remaining_steps = sort_steps(dependencies);

  let total_workers = 5;
  let mut current_worker_steps = [nil] * total_workers;
  let mut remaining_worker_durations = [0] * total_workers;

  let mut total_duration = 0;

  loop(|| {
    if size(remaining_steps) == 0 && all(_ == 0, remaining_worker_durations) {
      break;
    }

    let mut next_steps = remaining_steps
      |> filter(|step| all(|[_, dependent]| step != dependent, dependencies));

    0..total_workers - 1 |> each(|worker| {
      remaining_worker_durations = update(worker, 0, |time| max([time - 1, 0]), remaining_worker_durations);

      if remaining_worker_durations[worker] > 0 {
        return _;
      }

      dependencies = dependencies |> filter(|[step]| step != current_worker_steps[worker]);

      if size(next_steps) == 0 {
        return _;
      }

      let next_step = first(next_steps);
      remaining_steps = remove_value(next_step, remaining_steps);
      current_worker_steps = update(worker, nil, || next_step, current_worker_steps);
      remaining_worker_durations = update(worker, 0, || time(next_step), remaining_worker_durations);
      next_steps = rest(next_steps);
    });

    total_duration = total_duration + 1;
  });

  total_duration;
}

test: {
  input: "Step C must be finished before step A can begin.
Step C must be finished before step F can begin.
Step A must be finished before step B can begin.
Step A must be finished before step D can begin.
Step B must be finished before step E can begin.
Step D must be finished before step E can begin.
Step F must be finished before step E can begin."
  part_one: "CABDFE"
  part_two: 253
}
