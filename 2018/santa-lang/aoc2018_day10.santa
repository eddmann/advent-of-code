input: read("aoc://2018/10")

let parse_points = lines
  >> map(|point| {
    let [x, y, vx, vy] = point
      |> regex_match("position=<([0-9+\\s-]+),([0-9+\\s-]+)> velocity=<([0-9+\\s-]+),([0-9+\\s-]+)>")
      |> map(int);
    #{x, y, vx, vy};
  })
  >> set;

let move = |points, seconds| {
  let xs = points |> map(|point| point["x"] + point["vx"] * seconds);
  let ys = points |> map(|point| point["y"] + point["vy"] * seconds);

  max(xs) - min(xs) + max(ys) - min(ys);
}

let draw = |points, seconds| {
  let moved_points = points
    |> map(|point| [
      point["x"] + point["vx"] * seconds,
      point["y"] + point["vy"] * seconds
    ]);

  let [xs, ys] = zip(..list(moved_points));

  min(ys)..max(ys)
    |> map(|y| {
      let col = min(xs)..max(xs)
        |> map(|x| if (moved_points `contains` [x, y]) { "#" } else { " " })
        |> reduce(+, "");
      col + "\n";
    })
    |> reduce(+, "");
};

let message_appears = |points, init_seconds| {
  let init_seconds = 10600;
  let move_points = move(points);

  let [seconds] = zip(init_seconds.., init_seconds+1..)
    |> find(|[curr, next]| move_points(curr) < move_points(next));

  seconds;
}

part_one: {
  let points = parse_points(input);

  points
    |> message_appears
    |> draw(points);
}

part_two: {
  parse_points(input)
    |> message_appears
}
